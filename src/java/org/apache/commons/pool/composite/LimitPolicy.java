/*
 * Copyright 2006 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.pool.composite;

import org.apache.commons.pool.ObjectPool;
import org.apache.commons.pool.KeyedObjectPool;

import java.io.ObjectStreamException;
import java.io.Serializable;
import java.util.NoSuchElementException;

/**
 * Configures the behavior of the pool when there is a limit on the number of concurrently borrowed objects.
 *
 * @see CompositeObjectPoolFactory#setLimitPolicy(LimitPolicy)
 * @see CompositeKeyedObjectPoolFactory#setLimitPolicy(LimitPolicy)
 * @author Sandy McArthur
 * @since Pool 2.0
 * @version $Revision$ $Date$
 */
/* XXX For Pool 3: public enum LimitPolicy {FAIL, WAIT} but keep existing Javadoc. */
public final class LimitPolicy implements Serializable {

    private static final long serialVersionUID = -4325661345028907604L;

    /**
     * When the number of active objects has been reached, fail with a <code>NoSuchElementException</code> instead of
     * returning a new object.
     * @see NoSuchElementException
     * @see ObjectPool#getNumActive
     * @see KeyedObjectPool#getNumActive
     */
    public static final LimitPolicy FAIL = new LimitPolicy("FAIL");

    /**
     * When the number of active objects has been reached, wait for the specified amount of time before failing with
     * a <code>NoSuchElementException</code>.
     * @see NoSuchElementException
     * @see ObjectPool#getNumActive
     * @see KeyedObjectPool#getNumActive
     */
    public static final LimitPolicy WAIT = new LimitPolicy("WAIT");

    /**
     * enum name.
     */
    private final String name;

    private LimitPolicy(final String name) {
        this.name = name;
    }

    public String toString() {
        return name;
    }

    // Autogenerated with Java 1.5 enums
    public static LimitPolicy[] values() {
        return new LimitPolicy[] {FAIL, WAIT};
    }

    // necessary for serialization
    private static int nextOrdinal = 0;
    private final int ordinal = nextOrdinal++;
    private Object readResolve() throws ObjectStreamException {
        return values()[ordinal];
    }
}