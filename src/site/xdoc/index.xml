<?xml version="1.0"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<document>
   <properties>
      <title>Overview</title>
      <author email="dev@commons.apache.org">Commons Documentation Team</author>
      <revision>$Id$</revision>
   </properties>

   <body>
      <section name="The Pool Component">
         <p>
          Pool provides an Object-pooling API, with three major aspects:
          <ol>
           <li>
            A generic object pool interface that clients and implementors can use to provide easily 
            interchangeable pooling implementations.
           </li>
           <li>
            A toolkit for creating modular object pools.
           </li>
           <li>
            Several general purpose pool implementations.
           </li>
          </ol>
         </p>
      </section>

      <section name="Releases">
         <p>
            See the <a href="downloads.html">downloads</a> page for information on obtaining releases.
         </p>
      </section>

      <section name="Features">
        <p>
            The 
            <a href="./apidocs/org/apache/commons/pool2/package-summary.html">org.apache.commons.pool2</a> 
            package defines a handful of pooling interfaces and some base classes 
            that may be useful when creating new pool implementations.
        </p>
        <subsection name="ObjectPool">
          <p>
             <a href="./apidocs/org/apache/commons/pool2/ObjectPool.html"><code>ObjectPool</code></a>
             defines a trivially simple pooling interface:
          </p>
<source>
public interface ObjectPool&lt;T&gt; {
    T borrowObject();
    void returnObject(T borrowed);
}
</source>           
          <p>
            Some client classes won't integrate with <i>Pool</i> any more than this.
            Clients written to this interface can use arbitrary <code>ObjectPool</code> 
            implementations interchangeably. 
          </p>           
          <p>
             <a href="./apidocs/org/apache/commons/pool2/BaseObjectPool.html"><code>BaseObjectPool</code></a>
             provides an abstract base implementation of <code>ObjectPool</code>. Clients are
             encouraged but not required to extend <code>BaseObjectPool</code> for new 
             <code>ObjectPool</code> implementations.
          </p>
          <p>
             <a href="./apidocs/org/apache/commons/pool2/KeyedObjectPool.html"><code>KeyedObjectPool</code></a>
             defines a similar interface for pools composed of heterogeneous objects:
          </p>
<source>
public interface KeyedObjectPool&lt;K,V&gt; {
    V borrowObject(K key);
    void returnObject(K key, V borrowed);
}
</source>           
        </subsection>
        <subsection name="PooledObjectFactory">
          <p>
             The <i>Pool</i> package makes it possible separate the way in which instances
             are pooled from the way in which instances are created and destroyed. 
             <a href="./apidocs/org/apache/commons/pool2/PooledObjectFactory.html"><code>PooledObjectFactory</code></a>
             supports this by providing a generic interface for the lifecycle of a pooled object:
          </p>
<source>
public interface PooledObjectFactory&lt;T&gt; {
    PooledObject&lt;T&gt; makeObject();
    void activateObject(PooledObject&lt;T&gt; obj);
    void passivateObject(PooledObject&lt;T&gt; obj);
    boolean validateObject(PooledObject&lt;T&gt; obj);
    void destroyObject(PooledObject&lt;T&gt; obj);
}
</source>           
          <p>
             <code>ObjectPool</code> implementations may be written to accept arbitrary
             <code>PooledObjectFactory</code>s.
             This makes is possible for clients to select pooling-behavior distinct 
             from the kinds of objects that are pooled.  
          </p>           
          <p>
             <a href="./apidocs/org/apache/commons/pool2/BasePooledObjectFactory.html"><code>BasePooledObjectFactory</code></a>
             provides an abstract base implementation of <code>PooledObjectFactory</code> that
             makes implementations a snap.
          </p>
          <p>
             <a href="./apidocs/org/apache/commons/pool2/KeyedPooledObjectFactory.html"><code>KeyedPooledObjectFactory</code></a>
             defines a similar interface for <code>KeyedObjectPool</code>s:
          </p>
<source>
public interface KeyedPoolableObjectFactory&lt;K,V&gt; {
    PooledObject&lt;V&gt; makeObject(K key);
    void activateObject(K key, PooledObject&lt;V&gt; obj);
    void passivateObject(K key, PooledObject&lt;V&gt; obj);
    boolean validateObject(K key, PooledObject&lt;V&gt; obj);
    void destroyObject(K key, PooledObject&lt;V&gt; obj);
}
</source>           
          <p>
             <a href="./apidocs/org/apache/commons/pool2/BaseKeyedPooledObjectFactory.html"><code>BaseKeyedPooledObjectFactory</code></a>
             provides an abstract base implementation of <code>KeyedPooledObjectFactory</code> that
             makes implementations a snap.
          </p>
        </subsection>
        <p>
            The 
            <a href="./apidocs/org/apache/commons/pool2/impl/package-summary.html">org.apache.commons.pool2.impl</a> 
            package provides some <i>Pool</i> implementations.
        </p>
        <subsection name="GenericObjectPool">
          <p>
             <a href="./apidocs/org/apache/commons/pool2/impl/GenericObjectPool.html"><code>GenericObjectPool</code></a>
             provides a wide variety of configuration options, including the ability to cap the number of idle or
             active instances, to evict instances as they sit idle in the pool, etc.
          </p>
          <p>
             <a href="./apidocs/org/apache/commons/pool2/impl/GenericKeyedObjectPool.html"><code>GenericKeyedObjectPool</code></a>
             offers the same behavior for keyed pools.
          </p>
        </subsection>
        <subsection name="SoftReferenceObjectPool">
          <p>
             <a href="./apidocs/org/apache/commons/pool2/impl/SoftReferenceObjectPool.html"><code>SoftReferenceObjectPool</code></a>
             can grow as needed, but allows the garbage collector to evict idle instances from the pool as needed. 
          </p>
        </subsection>
      </section>
   </body>
</document>
